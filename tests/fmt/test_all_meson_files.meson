# SPDX-FileCopyrightText: Stone Tickle <lattis@mochiro.moe>
# SPDX-License-Identifier: GPL-3.0-only

fs = import('fs')

func file_list(source_root str) -> list[str]
    l = ['meson.build', 'meson_options.txt']

    foreach dir : ['doc', 'src', 'tests']
        l += fs.glob(source_root / f'@dir@/**/meson.build')
        l += fs.glob(source_root / f'@dir@/**/*.meson')
        l += fs.glob(source_root / f'@dir@/**/meson_options.txt')
    endforeach

    return l
endfunc

muon = argv[1]
source_root = argv[2]

fail_fast = 'f' in argv # TODO make this a proper argument

files = []
files_cmd_len = 0
files_len = 0
exclude = ['badnum.meson', 'line_continuation.meson']
failing_files = []

func test_files(files list[str]) -> list[str]
    if files.length() > 0
        res = run_command(muon, 'fmt', '-el', files, check: false)
        return res.stdout().splitlines()
    endif

    return []
endfunc

foreach f : file_list(source_root)
    basename = fs.name(f)
    if basename in exclude or 'tests/fmt/editorconfig' in f or 'tests/fmt/cases' in f
        continue
    endif

    f = source_root / f
    files += f
    files_len += 1
    files_cmd_len += f.length()

    if files_cmd_len > 4096
        failing_files += test_files(files)
        files.clear()
        files_cmd_len = 0
    endif

    if fail_fast and failing_files.length() > 0
        break
    endif
endforeach

failing_files += test_files(files)

diff = find_program('diff', required: false)

failing_len = failing_files.length()
passing_len = files_len - failing_len

foreach path : failing_files
    print(f'\033[31mfailing\033[0m: @path@\n')
endforeach

print(f'@passing_len@/@files_len@ passed\n')

if failing_len > 0
    error('errors encountered')
endif
